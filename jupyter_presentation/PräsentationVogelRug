{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Performance-tests to determine better strategies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performance-test #1: using Arrays of Arrays vs 3 dimensional Arrays"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### two little examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2-element Array{Array{Float64,2},1}:\n",
       " [1.0 0.0; 0.0 1.0]\n",
       " [1.0 2.0; 3.0 4.0]"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ArrayA= [[1.0 0.0;0.0 1.0],[1.0 2.0;3.0 4.0]]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is now a vector and its entries are matrices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2×2 Array{Float64,2}:\n",
       " 1.0  0.0\n",
       " 0.0  1.0"
      ]
     },
     "execution_count": 122,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ArrayA[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2×2 Array{Float64,2}:\n",
       " 1.0  0.0\n",
       " 0.0  1.0"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Array3d= Array{Float64,3}(undef,2,2,2)\n",
    "Array3d[1,:,:]=[1.0 0.0;0.0 1.0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2×2 Array{Float64,2}:\n",
       " 1.0  2.0\n",
       " 3.0  4.0"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Array3d[2,:,:]=[1.0 2.0;3.0 4.0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "basically the same Array:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "true"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(Array3d[1,:,:]==ArrayA[1][:,:]) && (Array3d[2,:,:]==ArrayA[2][:,:])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### defining two test-functions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "actual code iterates over every index and does a simple operation, so the test-functions should do the same"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### test Arrays of Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "arrayarray (generic function with 1 method)"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function arrayarray(A::Array{Array{Float64,2},1}, B::Array{Array{Float64,2},1})\n",
    "    sum=0.0;\n",
    "    for k in 1:size(A[1])[2]\n",
    "        for l in 1:size(A[1])[1]\n",
    "            for j=1:length(B)\n",
    "                for i=1:length(A)\n",
    "                    sum+=A[i][l,k]*B[j][l,k]\n",
    "                end\n",
    "            end\n",
    "        end\n",
    "    end\n",
    " return sum;\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### test 3 dimensional Arrays"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array3d (generic function with 1 method)"
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function array3d(A::Array{Float64,3}, B::Array{Float64,3})\n",
    "    sum=0.0;\n",
    "    for k in 1:size(A)[3]\n",
    "        for l in 1:size(A)[2]\n",
    "            for i=1:size(A)[1]\n",
    "                for j=1:size(B)[1]\n",
    "                    sum+=A[i,l,k]*B[j,l,k]\n",
    "                end\n",
    "            end\n",
    "        end\n",
    "    end\n",
    " return sum;\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### initialize large, equivalent Matrices to test"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "first one has random entries, second one is filled with the exact same entries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "A1=Array{Array{Float64,2},1}(undef,10)\n",
    "B1=Array{Array{Float64,2},1}(undef,10)\n",
    "\n",
    "A2=Array{Float64,3}(undef,10,1000,1000)\n",
    "B2=Array{Float64,3}(undef,10,1000,1000)\n",
    "\n",
    "for i in 1:10\n",
    "    A1[i]=rand(1000,1000)\n",
    "    B1[i]=rand(1000,1000)\n",
    "\n",
    "    A2[i,:,:]=A1[i]\n",
    "    B2[i,:,:]=B1[i]\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### do the test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [],
   "source": [
    "using BenchmarkTools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "sum1=0.0; sum2=0.0;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [],
   "source": [
    "benchmarksarrayarray = @benchmark sum1=arrayarray(A1,B1);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [],
   "source": [
    "benchmarksarray3d = @benchmark sum2=array3d(A2,B2);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "proving that both functions have the same result:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "true"
      ]
     },
     "execution_count": 133,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sum1==sum2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"old\" version:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  0 bytes\n",
       "  allocs estimate:  0\n",
       "  --------------\n",
       "  minimum time:     727.746 ms (0.00% GC)\n",
       "  median time:      741.806 ms (0.00% GC)\n",
       "  mean time:        745.432 ms (0.00% GC)\n",
       "  maximum time:     775.134 ms (0.00% GC)\n",
       "  --------------\n",
       "  samples:          7\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmarksarrayarray"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\"new\" version:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  0 bytes\n",
       "  allocs estimate:  0\n",
       "  --------------\n",
       "  minimum time:     244.475 ms (0.00% GC)\n",
       "  median time:      257.407 ms (0.00% GC)\n",
       "  mean time:        255.985 ms (0.00% GC)\n",
       "  maximum time:     268.201 ms (0.00% GC)\n",
       "  --------------\n",
       "  samples:          20\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "benchmarksarray3d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Performance-test #2: Comparing slices to views and how to use them properly"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### defining a function to test slices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testslice (generic function with 1 method)"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testslice(vector,a)\n",
    "    for i in 1:1000000\n",
    "        a=vector[i:i+5];\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### defining a function to test for-loops instead of slices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testloop (generic function with 1 method)"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testloop(vector,a)\n",
    "    for i in 1:1000000\n",
    "        for j in 0:5\n",
    "            a[j+1]=vector[i+j]\n",
    "        end\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### defining a function to test @view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testview (generic function with 1 method)"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testview(vector)\n",
    "    for i in 1:1000000\n",
    "        a= @view vector[i:i+5];\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### defining a function to test preallocating the @view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testpreallocview (generic function with 1 method)"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testpreallocview(vector,a)\n",
    "    for i in 1:1000000\n",
    "        a= @view vector[i:i+5];\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### defining a function to test @view in combination with @inbounds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testviewinbounds (generic function with 1 method)"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testviewinbounds(vector)\n",
    "    for i in 1:1000000\n",
    "        a= @inbounds @views vector[i:i+5];\n",
    "    end\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### initializing a testvector and preallocating a slice/@view"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [],
   "source": [
    "vector = rand(1000000+5);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [],
   "source": [
    "as = vector[1:6];"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "av = @view vector[1:6];"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### benchmarking every function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  122.07 MiB\n",
       "  allocs estimate:  1000000\n",
       "  --------------\n",
       "  minimum time:     128.201 ms (17.77% GC)\n",
       "  median time:      137.328 ms (19.69% GC)\n",
       "  mean time:        136.717 ms (19.58% GC)\n",
       "  maximum time:     145.770 ms (22.29% GC)\n",
       "  --------------\n",
       "  samples:          37\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@benchmark testslice(vector,as)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  0 bytes\n",
       "  allocs estimate:  0\n",
       "  --------------\n",
       "  minimum time:     10.888 ms (0.00% GC)\n",
       "  median time:      11.112 ms (0.00% GC)\n",
       "  mean time:        11.717 ms (0.00% GC)\n",
       "  maximum time:     14.849 ms (0.00% GC)\n",
       "  --------------\n",
       "  samples:          426\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@benchmark testloop(vector,as)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  0 bytes\n",
       "  allocs estimate:  0\n",
       "  --------------\n",
       "  minimum time:     1.413 ms (0.00% GC)\n",
       "  median time:      1.416 ms (0.00% GC)\n",
       "  mean time:        1.627 ms (0.00% GC)\n",
       "  maximum time:     6.578 ms (0.00% GC)\n",
       "  --------------\n",
       "  samples:          3063\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 146,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@benchmark testview(vector)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  0 bytes\n",
       "  allocs estimate:  0\n",
       "  --------------\n",
       "  minimum time:     1.413 ms (0.00% GC)\n",
       "  median time:      1.413 ms (0.00% GC)\n",
       "  mean time:        1.479 ms (0.00% GC)\n",
       "  maximum time:     2.759 ms (0.00% GC)\n",
       "  --------------\n",
       "  samples:          3375\n",
       "  evals/sample:     1"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@benchmark testpreallocview(vector,av)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BenchmarkTools.Trial: \n",
       "  memory estimate:  0 bytes\n",
       "  allocs estimate:  0\n",
       "  --------------\n",
       "  minimum time:     46.204 ns (0.00% GC)\n",
       "  median time:      46.479 ns (0.00% GC)\n",
       "  mean time:        54.220 ns (0.00% GC)\n",
       "  maximum time:     2.986 μs (0.00% GC)\n",
       "  --------------\n",
       "  samples:          10000\n",
       "  evals/sample:     989"
      ]
     },
     "execution_count": 148,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "@benchmark testviewinbounds(vector)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "BUT @inbounds is dangerous:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "vector=rand(10);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "BoundsError",
     "evalue": "BoundsError: attempt to access 10-element Array{Float64,1} at index [6:11]",
     "output_type": "error",
     "traceback": [
      "BoundsError: attempt to access 10-element Array{Float64,1} at index [6:11]",
      "",
      "Stacktrace:",
      " [1] throw_boundserror(::Array{Float64,1}, ::Tuple{UnitRange{Int64}}) at ./abstractarray.jl:484",
      " [2] checkbounds at ./abstractarray.jl:449 [inlined]",
      " [3] view at ./subarray.jl:155 [inlined]",
      " [4] testview(::Array{Float64,1}) at ./In[138]:3",
      " [5] top-level scope at In[150]:1"
     ]
    }
   ],
   "source": [
    "testview(vector);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "rewrite testviewinbounds to see what's actually happening:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testviewinbounds (generic function with 1 method)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testviewinbounds(vector)\n",
    "    a=@views vector[1:6];\n",
    "    for i in 1:1000000\n",
    "        a= @inbounds @views vector[i:i+5];\n",
    "    end\n",
    "    println(a);\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.0, 0.0, 2.28625e-314, 2.21417e-314, 2.29708e-314]\n"
     ]
    }
   ],
   "source": [
    "testviewinbounds(vector);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reducing Allocations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Importing our module FEMCE (Finite Element Method for the compressible Euler equation):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "import FEMCE;"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining a $100 \\times 50$ mesh on $\\Omega = [-50,50] \\, km \\, \\times \\, [-25,25] \\, km$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [],
   "source": [
    "m=FEMCE.generateRectMesh(100,50,-50000.0,-25000.0,50000.0,25000.0);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "image/png": ""
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FEMCE.plotMesh2D(m,false)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obtaining the points and weights for the Gauß-Legendre cubature to exactly integrate polynomials of degree $\\leq 9$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2×5 Array{Float64,2}:\n",
       " 0.0469101  0.230765  0.5  0.769235  0.95309\n",
       " 0.0469101  0.230765  0.5  0.769235  0.95309"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "5×5 Array{Float64,2}:\n",
       " 0.0140336  0.02835    0.0336963  0.02835    0.0140336\n",
       " 0.02835    0.0572714  0.0680716  0.0572714  0.02835  \n",
       " 0.0336963  0.0680716  0.0809086  0.0680716  0.0336963\n",
       " 0.02835    0.0572714  0.0680716  0.0572714  0.02835  \n",
       " 0.0140336  0.02835    0.0336963  0.02835    0.0140336"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "kubPoints, kubWeights=FEMCE.getKub(9, m.meshType);\n",
    "display(kubPoints);\n",
    "display(kubWeights);"
   ]
  },
  {
   "attachments": {
    "FERaeume.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining the nodal functions $ \\left\\lbrace \\phi_{i} \\right\\rbrace_{i=1}^{n} $ and degrees of freedom for the finite element:![FERaeume.png](attachment:FERaeume.png)\n",
    "Shown here f.l.t.r.: P1, DG0, RT0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "So P1 has the nodal functions on the unit square as the reference element:\n",
    "\\begin{align*}\n",
    "\\phi_{1}(x)&=(1-x_{1})(1-x_{2}) \\\\\n",
    "\\phi_{2}(x)&=x_{1}(1-x_{2}) \\\\\n",
    "\\phi_{3}(x)&=x_{1}x_{2} \\\\\n",
    "\\phi_{4}(x)&=(1-x_{1})x_{2}\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "boundary=FEMCE.getBoundary(m);\n",
    "b=Set{Int64}(collect(keys(boundary)));\n",
    "degF=FEMCE.degF(m,:P1,boundary,b,kubPoints);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5×5 Array{Float64,2}:\n",
       " 0.90838    0.73315    0.476545  0.21994    0.0447095 \n",
       " 0.73315    0.591722   0.384617  0.177513   0.0360849 \n",
       " 0.476545   0.384617   0.25      0.115383   0.023455  \n",
       " 0.21994    0.177513   0.115383  0.0532526  0.0108252 \n",
       " 0.0447095  0.0360849  0.023455  0.0108252  0.00220056"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "5×5 Array{Float64,2}:\n",
       " 0.0447095  0.0360849  0.023455  0.0108252  0.00220056\n",
       " 0.21994    0.177513   0.115383  0.0532526  0.0108252 \n",
       " 0.476545   0.384617   0.25      0.115383   0.023455  \n",
       " 0.73315    0.591722   0.384617  0.177513   0.0360849 \n",
       " 0.90838    0.73315    0.476545  0.21994    0.0447095 "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "5×5 Array{Float64,2}:\n",
       " 0.0447095   0.21994    0.476545  0.73315    0.90838  \n",
       " 0.0360849   0.177513   0.384617  0.591722   0.73315  \n",
       " 0.023455    0.115383   0.25      0.384617   0.476545 \n",
       " 0.0108252   0.0532526  0.115383  0.177513   0.21994  \n",
       " 0.00220056  0.0108252  0.023455  0.0360849  0.0447095"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "5×5 Array{Float64,2}:\n",
       " 0.00220056  0.0108252  0.023455  0.0360849  0.0447095\n",
       " 0.0108252   0.0532526  0.115383  0.177513   0.21994  \n",
       " 0.023455    0.115383   0.25      0.384617   0.476545 \n",
       " 0.0360849   0.177513   0.384617  0.591722   0.73315  \n",
       " 0.0447095   0.21994    0.476545  0.73315    0.90838  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in 1:length(degF.phi)\n",
    "    display(degF.phi[i])\n",
    "end"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Randomly generating the values at the degrees of freedom:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "val=rand(m.topology.size[1]);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Defining a function that calculates the value of the ansatz for a variable $b=\\sum_{j=1}^{N} v_{j} \\, \\phi_{j}$ for each cell:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "getIndices (generic function with 1 method)"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testAllocations(degF::FEMCE.degF{1},val::Array{Float64,1},m::mesh,kubWeights::Array{Float64,2})\n",
    "    phi=degF.phi;\n",
    "    sk=size(kubWeights);\n",
    "    for k in 1:m.topology.size[3]\n",
    "        ind=getIndices(degF.incidence,degF.offset,k);\n",
    "        w=zeros(sk);\n",
    "        for i in 1:length(ind)\n",
    "            w+=val[ind[i]]*phi[i];\n",
    "        end\n",
    "    end\n",
    "    return nothing;\n",
    "end\n",
    "\n",
    "function getIndices(incidence::Array{Int64,1},offset::Array{Int64,1},k::Int64)\n",
    "    return incidence[offset[k]:offset[k+1]-1];\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.064008 seconds (50.00 k allocations: 12.894 MiB, 29.70% gc time)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**GOAL: Minimzing these allocations!**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Accessing phi via @views, instead of copying the arrays:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testAllocations (generic function with 1 method)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testAllocations(degF::FEMCE.degF{1},val::Array{Float64,1},m::mesh,kubWeights::Array{Float64,2})\n",
    "    phi=@views degF.phi;\n",
    "    sk=size(kubWeights);\n",
    "    for k in 1:m.topology.size[3]\n",
    "        ind=getIndices(degF.incidence,degF.offset,k);\n",
    "        w=zeros(sk);\n",
    "        for i in 1:length(ind)\n",
    "            w+=val[ind[i]]* phi[i];\n",
    "        end\n",
    "    end\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.220228 seconds (123.38 k allocations: 26.978 MiB, 10.90% gc time)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Avoid allocating the array w in each iteration of the loop:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testAllocations (generic function with 1 method)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testAllocations(degF::FEMCE.degF{1},val::Array{Float64,1},m::mesh,kubWeights::Array{Float64,2})\n",
    "    phi=@views degF.phi;\n",
    "    sk=size(kubWeights);\n",
    "    w=zeros(sk);\n",
    "    for k in 1:m.topology.size[3]\n",
    "        ind=getIndices(degF.incidence,degF.offset,k);\n",
    "        fill!(w,0.0);\n",
    "        for i in 1:length(ind)\n",
    "            w+=val[ind[i]]*phi[i];\n",
    "        end\n",
    "    end\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.080908 seconds (113.72 k allocations: 24.248 MiB, 29.69% gc time)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Optimizing the addition of the arrays w and phi[i] by using dotwise operations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testAllocations (generic function with 1 method)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testAllocations(degF::FEMCE.degF{1},val::Array{Float64,1},m::mesh,kubWeights::Array{Float64,2})\n",
    "    phi=@views degF.phi;\n",
    "    sk=size(kubWeights);\n",
    "    w=zeros(sk);\n",
    "    for k in 1:m.topology.size[3]\n",
    "        ind=getIndices(degF.incidence,degF.offset,k);\n",
    "        fill!(w,0.0);\n",
    "        for i in 1:length(ind)\n",
    "            @. w+=val[ind[i]]*phi[i];\n",
    "        end\n",
    "    end\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.122041 seconds (55.75 k allocations: 3.149 MiB)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Turning getIndices() into a mutating function:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "getIndices! (generic function with 1 method)"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testAllocations(degF::FEMCE.degF{1},val::Array{Float64,1},m::mesh,kubWeights::Array{Float64,2})\n",
    "    phi=@views degF.phi;\n",
    "    sk=size(kubWeights);\n",
    "    w=zeros(sk);\n",
    "    ind=Array{Int64,1}(undef,length(phi));\n",
    "    for k in 1:m.topology.size[3]\n",
    "        getIndices!(ind,degF.incidence,degF.offset,k);\n",
    "        fill!(w,0.0);\n",
    "        for i in 1:length(ind)\n",
    "            @. w+=val[ind[i]]*phi[i];\n",
    "        end\n",
    "    end\n",
    "    return nothing;\n",
    "end\n",
    "function getIndices!(ind::Array{Int64,1},incidence::Array{Int64,1},offset::Array{Int64,1},k::Int64)\n",
    "    ind=incidence[offset[k]:offset[k+1]-1];\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "ename": "BoundsError",
     "evalue": "BoundsError: attempt to access 10201-element Array{Float64,1} at index [4620635440]",
     "output_type": "error",
     "traceback": [
      "BoundsError: attempt to access 10201-element Array{Float64,1} at index [4620635440]",
      "",
      "Stacktrace:",
      " [1] getindex at ./array.jl:729 [inlined]",
      " [2] testAllocations(::FEMCE.degF{1}, ::Array{Float64,1}, ::mesh, ::Array{Float64,2}) at ./In[50]:10",
      " [3] top-level scope at util.jl:156",
      " [4] top-level scope at In[51]:1"
     ]
    }
   ],
   "source": [
    "@time testAllocations(degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "But how can we change it to a mutating function?\n",
    "- Mutable Data Type\n",
    "- You need to change what the object contains, not just what the name points to!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "getIndices! (generic function with 1 method)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function getIndices!(ind::Array{Int64,1},incidence::Array{Int64,1},offset::Array{Int64,1},k::Int64)\n",
    "    ind[:]=incidence[offset[k]:offset[k+1]-1];\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.179649 seconds (69.60 k allocations: 3.746 MiB, 13.34% gc time)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using a for loop instead of a slice:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "getIndices! (generic function with 1 method)"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function getIndices!(ind::Array{Int64,1},incidence::Array{Int64,1},offset::Array{Int64,1},k::Int64)\n",
    "    z=1;\n",
    "    for i=offset[k]:offset[k+1]-1\n",
    "        ind[z]=incidence[i];\n",
    "        z+=1;\n",
    "    end\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.004670 seconds (6 allocations: 560 bytes)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since storing phi as an Array{Array{Float64,2},1} is not optimal, we want to change the data type of phi to Array{Float64,3} and check if this is actually preferable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To test this, we define a function that changes the data type of phi accordingly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "hdimarray (generic function with 1 method)"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function hdimarray(s::Array{Array{Float64,2},1})\n",
    "    sh=Array{Float64,3}(undef,size(s[1],1),size(s[1],2),length(s));\n",
    "    for k in 1:length(s)\n",
    "        for j in 1:size(s[1],2)\n",
    "            for i in 1:size(s[1],1)\n",
    "                sh[i,j,k]=s[k][i,j]\n",
    "            end\n",
    "        end\n",
    "    end\n",
    "    return sh;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [],
   "source": [
    "phi=hdimarray(degF.phi);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Adapting the test function accordingly:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testAllocations (generic function with 5 methods)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testAllocations(phi::Array{Float64,3},degF::FEMCE.degF{1},val::Array{Float64,1},m::mesh,kubWeights::Array{Float64,2})\n",
    "    sk=size(kubWeights);\n",
    "    w=zeros(sk);\n",
    "    ind=Array{Int64,1}(undef,size(phi,3));\n",
    "    for k in 1:m.topology.size[3]\n",
    "        getIndices!(ind,degF.incidence,degF.offset,k);\n",
    "        fill!(w,0.0);\n",
    "        for i in 1:length(ind)\n",
    "            @. w+=val[ind[i]]* phi[:,:,i];\n",
    "        end\n",
    "    end\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.016615 seconds (20.01 k allocations: 5.494 MiB)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(phi,degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We again have allocation issues. But why?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Again replacing slices with a for loop:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "testAllocations (generic function with 5 methods)"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "function testAllocations(phi::Array{Float64,3},degF::FEMCE.degF{1},val::Array{Float64,1},m::mesh,kubWeights::Array{Float64,2})\n",
    "    sk=size(kubWeights);\n",
    "    w=zeros(sk);\n",
    "    ind=Array{Int64,1}(undef,size(phi,3));\n",
    "    for k in 1:m.topology.size[3]\n",
    "        getIndices!(ind,degF.incidence,degF.offset,k);\n",
    "        fill!(w,0.0);\n",
    "        for i in 1:length(ind)\n",
    "            for j in 1:sk[2]\n",
    "                for k in 1:sk[1]\n",
    "                    w[k,j]+=val[ind[i]]* phi[k,j,i];\n",
    "                end\n",
    "            end\n",
    "\n",
    "        end\n",
    "    end\n",
    "    return nothing;\n",
    "end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {
    "collapsed": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.003136 seconds (6 allocations: 560 bytes)\n"
     ]
    }
   ],
   "source": [
    "@time testAllocations(phi,degF,val,m,kubWeights);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Results for our code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  0.104294 seconds (16 allocations: 4.359 KiB)\n",
      "  0.171721 seconds (16 allocations: 4.359 KiB)\n",
      "  0.149442 seconds (16 allocations: 4.359 KiB)\n",
      "2.0\n"
     ]
    }
   ],
   "source": [
    "FEMCE.testWarmBubble();"
   ]
  }
 ],
 "metadata": {
  "@webio": {
   "lastCommId": null,
   "lastKernelId": null
  },
  "kernelspec": {
   "display_name": "Julia 1.1.0",
   "language": "julia",
   "name": "julia-1.1"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
